// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  ADMIN
  EDITOR
  REVIEWER
  SALES
  OPERATIONS
}

enum SubmissionStage {
  ANALYSIS
  PLAGIARISM_REVIEW
  EDITOR_MEETING
  APPROVAL_PROCESS
  PDF_REVIEW
  COVER_APPROVAL
  EVENT_PLANNING
  COMPLETED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  REVISION_NEEDED
}

enum ApprovalType {
  EDITOR_APPROVAL
  STUDENT_CONFIRMATION
  ADMIN_FINAL_APPROVAL
  PDF_APPROVAL
  COVER_APPROVAL
}

enum FileType {
  SUBMISSION_CONTENT
  PDF_SOFT_COPY
  COVER_DESIGN
  ATTACHMENT
}

enum NotificationType {
  WORKFLOW_UPDATE
  ASSIGNMENT
  APPROVAL_REQUEST
  EVENT_INVITATION
  SYSTEM_ALERT
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String   @map("password_hash")
  role          UserRole
  name          String
  grade         String?  // Only for students
  phone         String?
  parentEmail   String?  @map("parent_email") // For students
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  submissions           Submission[]        @relation("StudentSubmissions")
  editorSubmissions     Submission[]        @relation("EditorAssignments")  
  editorAssignments     EditorAssignment[]  @relation("EditorUser")
  studentAssignments    EditorAssignment[]  @relation("StudentUser")
  workflowStages        WorkflowStage[]
  fileAttachments       FileAttachment[]
  approvals             Approval[]
  eventsCreated         Event[]
  eventRsvps            EventRsvp[]
  notifications         Notification[]
  createdUsers          User[]              @relation("CreatedBy")
  createdBy             User?               @relation("CreatedBy", fields: [createdById], references: [id])
  createdById           String?             @map("created_by_id")

  @@map("users")
}

model Submission {
  id              String          @id @default(cuid())
  studentId       String          @map("student_id")
  editorId        String?         @map("editor_id")
  title           String
  content         String          @db.Text
  currentStage    SubmissionStage @default(ANALYSIS) @map("current_stage")
  workflowData    Json?           @map("workflow_data") // Store stage-specific data
  analysisResult  Json?           @map("analysis_result") // Claude API response
  plagiarismScore Int?            @map("plagiarism_score")
  plagiarismNotes String?         @db.Text @map("plagiarism_notes")
  isArchived      Boolean         @default(false) @map("is_archived")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  // Relations
  student         User              @relation("StudentSubmissions", fields: [studentId], references: [id])
  editor          User?             @relation("EditorAssignments", fields: [editorId], references: [id])
  workflowStages  WorkflowStage[]
  fileAttachments FileAttachment[]
  approvals       Approval[]
  events          Event[]

  @@map("submissions")
}

model WorkflowStage {
  id             String          @id @default(cuid())
  submissionId   String          @map("submission_id")
  stageNumber    Int             @map("stage_number")
  stageName      SubmissionStage @map("stage_name")
  status         String          @default("pending") // pending, in_progress, completed, skipped
  startedAt      DateTime?       @map("started_at")
  completedAt    DateTime?       @map("completed_at")
  assignedUserId String?         @map("assigned_user_id")
  notes          String?         @db.Text
  metadata       Json?           // Stage-specific data

  // Relations
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  assignedUser User?      @relation(fields: [assignedUserId], references: [id])

  @@unique([submissionId, stageNumber])
  @@map("workflow_stages")
}

model FileAttachment {
  id           String   @id @default(cuid())
  submissionId String   @map("submission_id")
  fileType     FileType @map("file_type")
  filePath     String   @map("file_path") // Wasabi storage path
  originalName String   @map("original_name")
  mimeType     String   @map("mime_type")
  fileSize     Int      @map("file_size")
  uploadedById String   @map("uploaded_by_id")
  isApproved   Boolean? @map("is_approved") // null = pending, true = approved, false = rejected
  version      Int      @default(1)
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  uploadedBy User       @relation(fields: [uploadedById], references: [id])

  @@map("file_attachments")
}

model EditorAssignment {
  id         String    @id @default(cuid())
  studentId  String    @map("student_id")
  editorId   String    @map("editor_id")
  assignedAt DateTime  @default(now()) @map("assigned_at")
  assignedBy String    @map("assigned_by")
  isActive   Boolean   @default(true) @map("is_active")
  notes      String?   @db.Text

  // Relations
  student User @relation("StudentUser", fields: [studentId], references: [id])
  editor  User @relation("EditorUser", fields: [editorId], references: [id])

  @@unique([studentId, editorId])
  @@map("editor_assignments")
}

model Approval {
  id           String         @id @default(cuid())
  submissionId String         @map("submission_id")
  userId       String         @map("user_id")
  approvalType ApprovalType   @map("approval_type")
  status       ApprovalStatus @default(PENDING)
  comments     String?        @db.Text
  approvedAt   DateTime?      @map("approved_at")
  createdAt    DateTime       @default(now()) @map("created_at")

  // Relations
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id])

  @@unique([submissionId, userId, approvalType])
  @@map("approvals")
}

model Event {
  id          String   @id @default(cuid())
  submissionId String? @map("submission_id") // Optional - can be general events
  title       String
  description String?  @db.Text
  eventDate   DateTime @map("event_date")
  location    String?
  isVirtual   Boolean  @default(false) @map("is_virtual")
  meetingLink String?  @map("meeting_link")
  maxAttendees Int?    @map("max_attendees")
  createdById String   @map("created_by_id")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  submission Submission? @relation(fields: [submissionId], references: [id])
  createdBy  User        @relation(fields: [createdById], references: [id])
  rsvps      EventRsvp[]

  @@map("events")
}

model EventRsvp {
  id            String   @id @default(cuid())
  eventId       String   @map("event_id")
  userId        String   @map("user_id")
  attendeeCount Int      @default(1) @map("attendee_count")
  status        String   @default("attending") // attending, maybe, declined
  dietaryReqs   String?  @map("dietary_requirements")
  notes         String?  @db.Text
  rsvpAt        DateTime @default(now()) @map("rsvp_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
  @@map("event_rsvps")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String           @map("user_id")
  type      NotificationType
  title     String
  message   String           @db.Text
  isRead    Boolean          @default(false) @map("is_read")
  readAt    DateTime?        @map("read_at")
  metadata  Json?            // Additional data for the notification
  createdAt DateTime         @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// System configuration and settings
model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String @db.Text
  description String?
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("system_config")
}
